import { Level, Language, Difficulty } from './index';

// User-related types
export interface User {
  id: string;
  firstName: string;
  username: string;
  profileUrl: string;
  isPrivate: boolean;
  joinedDate: string;
  totalGames: number;
  averageScore: number;
  earnedBadges: string[];
  role: 'admin' | 'user';
  email: string;
  clerkId: string;
}

// Game-related types
export interface Game {
  id: string;
  userId: string;
  language: Language;
  level: Level;
  score: number;
  volume: number;
  timestamp: string;
  snippetsPlayed: string[]; // Array of snippet IDs
  userAnswers: boolean[]; // Array of user's merge/reject decisions
}

// Code snippet types
export interface CodeSnippet {
  id: string;
  language: Language;
  volume: number;
  code: string;
  isValid: boolean;
  difficulty: Difficulty;
  createdAt: string;
  createdBy: string; // User ID of admin who created it
  explanation: string; // Explanation of why it's valid/invalid
  tags: string[]; // Tags for categorization
  aiGenerated?: boolean; // Flag to indicate if generated by AI
  baseSnippetId?: string; // Reference to the original snippet if AI-generated variant
}

// Language volume configuration
export interface LanguageVolume {
  id: string;
  language: Language;
  currentVolume: number;
  snippetCount: number;
  timeLimit: {
    easy: number;
    medium: number;
    hard: number;
  };
  snippetsPerGame: number;
  aiGeneratedCount: number; // Count of AI-generated snippets
  lastAiGeneration: string; // Timestamp of last AI generation
}

// User statistics per language
export interface UserStats {
  id: string;
  userId: string;
  language: Language;
  gamesPlayed: number;
  averageScore: number;
  highestScore: number;
  lastPlayed: string;
  volumes: number[]; // Array of completed volume numbers
}

// Game settings configuration
export interface GameSettings {
  id: string;
  timeLimits: {
    easy: number;
    medium: number;
    hard: number;
  };
  snippetsPerGame: {
    easy: number;
    medium: number;
    hard: number;
  };
  minSnippetsPerVolume: number;
  maxSnippetsPerVolume: number;
  aiGeneration: {
    enabled: boolean;
    validRatio: number; // Ratio of valid to invalid snippets (0-1)
    maxPerRequest: number; // Maximum snippets to generate in one request
    minSnippetsBeforeGeneration: number; // Generate new snippets when available count is below this
  };
}